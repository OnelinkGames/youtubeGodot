[gd_scene load_steps=4 format=2]

[ext_resource path="res://04.png" type="Texture" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

float noise(vec3 p) //Thx to Las^Mercury
{
	vec3 i = floor(p);
	vec4 a = dot(i, vec3(1.0, 57.0, 21.0)) + vec4(0.0, 57.0, 21.0, 78.0);
	vec3 f = cos((p-i)*acos(-1.0))*(-0.5)+0.5;
	a = mix(sin(cos(a)*a),sin(cos(1.+a)*(1.+a)), f.x);
	a.xy = mix(a.xz, a.yw, f.y);
	return mix(a.x, a.y, f.z);
}

float sphere(vec3 p, vec4 spr)
{
	return length(spr.xyz-p) - spr.w;
}

float flame(vec3 p, float iTime)
{
	float d = sphere(p*vec3(1.0,0.5,1.0), vec4(0.0,-1.0,0.0,1.0));
	return d + (noise(p+vec3(0.0,iTime*2.0,0.0)) + noise(p*3.0)*0.5)*0.25*(p.y) ;
}

float scene(vec3 p, float iTime)
{
	return min(100.0-length(p) , abs(flame(p, iTime)) );
}

vec4 raymarch(vec3 org, vec3 dir, float iTime)
{
	float d = 0.0, glow = 0.0, eps = 0.02;
	vec3  p = org;
	bool glowed = false;
	
	for(int i=0; i<64; i++)
	{
		d = scene(p, iTime) + eps;
		p += d * dir;
		if( d>eps )
		{
			if(flame(p, iTime) < 0.0)
				glowed=true;
			if(glowed)
       			glow = float(i)/64.0;
		}
	}
	return vec4(p,glow);
}

void fragment()
{
	vec2 v = -1.0 + 2.0 * FRAGCOORD.xy / (1.0 / SCREEN_PIXEL_SIZE).xy;
	v.x *= (1.0 / SCREEN_PIXEL_SIZE).x/(1.0 / SCREEN_PIXEL_SIZE).y;
	
	vec3 org = vec3(0.0, -2.0, 4.0);
	vec3 dir = normalize(vec3(v.x*1.6, -v.y, -1.5));
	
	vec4 p = raymarch(org, dir, TIME);
	float glow = p.w;
	
	vec4 col = mix(vec4(1.0,0.5,0.1,1.0), vec4(0.1,0.5,1.0,1.0), p.y*0.02+0.4);
	
	vec4 color = mix(vec4(0.0), col, pow(glow*2.0,4.0));
	
	vec4 finalColor = mix(vec4(1.), mix(vec4(1.,.5,.1,1.),vec4(0.1,.5,1.,1.),p.y*.02+.4), pow(glow*2.,4.));
	COLOR = texture(TEXTURE, UV * (finalColor.xy * finalColor.wz));
	//COLOR = finalColor;

}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )

[node name="Shader03" type="Node2D"]

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 2 )
position = Vector2( 586.295, 246.17 )
scale = Vector2( 1.78311, 1.59852 )
texture = ExtResource( 1 )
